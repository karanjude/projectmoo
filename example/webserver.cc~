#include <cstdio>
#include <iostream>
#include "uv.h"
#include <cstdio>
#include <cassert>
#include <cstdlib>

using namespace std;

static uv_loop_t* loop;
static uv_tcp_t server;

void on_close(uv_handle_t* handle, int status){
  free(handle);
  cerr << endl << "disconnected";
}

void on_read(uv_stream_t* client_handle, ssize_t nread, uv_buf_t buf){
}

void on_connect(uv_stream_t* server_handle, int status){
  assert(server_handle == (uv_stream_t*)&server);
  cerr << endl << "connected";

  uv_stream_t * client_handle = (uv_stream_t*) malloc(sizeof(uv_tcp_t));
  uv_tcp_init(loop, (uv_tcp_t*)client_handle);
  client_handle->data = server_handle;

  uv_accept(server_handle, client_handle);
  uv_read_start(server_handle, NULL, on_read);

}

int main(int argc, char** argv){
  loop = uv_default_loop();

  cerr << endl << "Hello world";

  uv_tcp_init(loop, &server);

  struct sockaddr_in address = uv_ip4_addr("0.0.0.0", 8000);
  
  int r = uv_tcp_bind(&server, address);

  if(r){
    //uv_err_t err = uv_last_error();
    fprintf(stderr, "bind:\n");
    return -1;
  }

  r = uv_listen((uv_stream_t*)&server, 128, on_connect);

  uv_run(loop);
  return 0;
}
